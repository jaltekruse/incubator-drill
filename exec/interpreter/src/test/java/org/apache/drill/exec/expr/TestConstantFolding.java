/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.apache.drill.exec.expr;

import org.apache.drill.BaseTestQuery;
import org.apache.drill.PlanTestBase;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.PrintWriter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TestConstantFolding extends PlanTestBase {

  @Rule
  public TemporaryFolder folder = new TemporaryFolder();

  public void testConstExprFolding_withPartitionPrune() throws Exception {

//    test("select * from dfs.`/tmp/drilltest/*/*.parquet` where dir0 = concat('small','file')");
  }

//  @Ignore("Add temporary file generation so this test can be run elsewhere")
  @Test
  public void testConstExprFolding_maxDir0() throws Exception {
    File bigFolder = folder.newFolder("bigfile");
    File bigFile = new File (bigFolder, "bigfile.csv");
    PrintWriter out = new PrintWriter(bigFile);
    out.println("1,2,3");
    out.println("1,2,3");
    out.println("1,2,3");
    out.println("1,2,3");
    out.println("1,2,3");
    out.println("1,2,3");
    out.close();

    File smallFolder = folder.newFolder("smallfile");
    File smallFile = new File (smallFolder, "smallfile.csv");
    out = new PrintWriter(smallFile);
    out.println("1,2,3");
    out.close();

    String path = folder.getRoot().toPath().toString();

    String query = "explain plan for select * from dfs.`" + path + "/*/*.csv` where dir0 = maxdir('dfs','root','" + path + "')";
    String plan = getPlanInString(query, OPTIQ_FORMAT);

    // Check and make sure that Filter is not present in the plan
    Pattern p = Pattern.compile("bigfile");
    Matcher m = p.matcher(plan);
    // should not read the big file after the pruning has been applied
    assert ! m.find();


    p = Pattern.compile("smallfile");
    m = p.matcher(plan);
    // should read the small file after the pruning has been applied
    assert m.find();
  }

  // THIS WORKS
  @Test
  public void testConstExprFolding_nonDirFilter() throws Exception {
    String query = "explain plan for select * from cp.`test_input.csv` where columns[0] = 2+2";
    String plan = getPlanInString(query, OPTIQ_FORMAT);

    // Check and make sure that Filter is not present in the plan
    Pattern p = Pattern.compile("condition=\\[=\\(ITEM\\(\\$[0-9], 0\\), 4\\)");
    Matcher m = p.matcher(plan);
    assert m.find();
  }

  @Test
  public void testConstExprFolding_ToLimit0() throws Exception {
    test("select * from cp.`test_input.csv` where 1=0");
  }

  // Despite a comment indicating that the plan generated by the ReduceExpressionRule
  // should be set to be always preferable to the input rel, I cannot get it to
  // produce a plan with the reduced result. I can trace through where the rule is fired
  // and I can see that the expression is being evaluated and the constant is being
  // added to a project, but this is not part of the final plan selected. May
  // need to open a calcite bug.
  // Next thing to try - disable the calc and filter rules, only leave the project one
  //    - results - didn't help
//  @Ignore
  @Test
  public void testConstExprFolding_InSelect() throws Exception {
    test("select columns[0], 3+5 from cp.`test_input.csv`");
  }
}
