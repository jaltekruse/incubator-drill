/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package org.apache.drill.exec.physical.config;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.apache.drill.common.exceptions.ExecutionSetupException;
import org.apache.drill.exec.ops.FragmentContext;
<<<<<<< HEAD
=======
import org.apache.drill.exec.physical.config.MockScanPOP.MockScanEntry;
>>>>>>> Parquet reader is now hooked up to the full execution engine and can go through a scan/screen. Tests have been updated to validate all of the individual values read out of parquet and sent through a scan/screen plan in the full execution engine.
import org.apache.drill.exec.physical.impl.BatchCreator;
import org.apache.drill.exec.physical.impl.ScanBatch;
import org.apache.drill.exec.record.RecordBatch;
import org.apache.drill.exec.store.ParquetRecordReader;
import org.apache.drill.exec.store.RecordReader;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import parquet.hadoop.ParquetFileReader;
import parquet.hadoop.metadata.ParquetMetadata;

public class ParquetScanBatchCreator implements BatchCreator<ParquetScan>{
  static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(MockScanBatchCreator.class);

  @Override
  public RecordBatch getBatch(FragmentContext context, ParquetScan config, List<RecordBatch> children) throws ExecutionSetupException {
    Preconditions.checkArgument(children.isEmpty());
<<<<<<< HEAD
    List<ParquetScan.ParquetReadEntry> entries = config.getReadEntries();
=======
    List<ParquetScan.ScanEntry> entries = config.getReadEntries();
>>>>>>> Parquet reader is now hooked up to the full execution engine and can go through a scan/screen. Tests have been updated to validate all of the individual values read out of parquet and sent through a scan/screen plan in the full execution engine.
    List<RecordReader> readers = Lists.newArrayList();
    ParquetMetadata readFooter = null;
    Path path;
    Configuration configuration;
<<<<<<< HEAD
    for(ParquetScan.ParquetReadEntry e : entries){
      File file = new File(e.getPath()).getAbsoluteFile();
=======
    for(ParquetScan.ScanEntry e : entries){
      File file = new File(e.getFilename()).getAbsoluteFile();
>>>>>>> Parquet reader is now hooked up to the full execution engine and can go through a scan/screen. Tests have been updated to validate all of the individual values read out of parquet and sent through a scan/screen plan in the full execution engine.

      path = new Path(file.toURI());
      configuration = new Configuration();

      try {
        readFooter = ParquetFileReader.readFooter(configuration, path);
<<<<<<< HEAD
        //readFooter.getBlocks().iterator().next().
=======
>>>>>>> Parquet reader is now hooked up to the full execution engine and can go through a scan/screen. Tests have been updated to validate all of the individual values read out of parquet and sent through a scan/screen plan in the full execution engine.
        ParquetFileReader parReader = new ParquetFileReader(configuration, path, Arrays.asList(
            readFooter.getBlocks().get(0)), readFooter.getFileMetaData().getSchema().getColumns());
        readers.add(new ParquetRecordReader(context, parReader, readFooter));
      } catch (IOException e1) {
        throw new ExecutionSetupException("Error opening parquet file or setting up reader.");
      }
    }
    return new ScanBatch(context, readers.iterator());
  }
}
